#!/usr/bin/env node

/*
 *
 * nmea-signalk executable
 *
 * @repository 		https://github.com/signalk/nmea-signalk
 * @description 	nmea0183 to Signal K parser, vaguely inspired by jamesp/node-nmea.
 * @author 			Fabian Tollenaar <fabian@starting-point.nl>
 * 
 *
 *
 * Copyright 2014, Fabian Tollenaar
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

"use strict";

var vessel 		= {}
,	debug 		= false
,	fs 			= require('fs')
,	nomnom 	 	= require('nomnom')
;

/** OPTIONS **/
nomnom.option('serial', {
	abbr: 's',
	default: null,
	help: 'Attach the Parser directly to a serial port.'
});

nomnom.option('baudrate', {
	abbr: 'b',
	default: 4800,
	help: 'Baudrate for serial port.'
});

nomnom.option('file', {
	abbr: 'f',
	default: null,
	help: 'Directly stream a file into the Parser.'
});

nomnom.option('line', {
	abbr: 'l',
	default: null,
	help: 'Parse a single line and exit.'
});

nomnom.option('vessel', {
	abbr: 'v',
	help: 'Location of the vessel.json file, containg information about the local environment.',
	default: '~/vessel.json'
});

nomnom.option('debug', {
	abbr: 'd',
	flag: true,
	default: false,
	help: "Run the Parser in debug mode."
});

// Parse the defined options
var argv = nomnom.parse();

if(argv.vessel) {
	if(fs.existsSync(argv.vessel)) {
		vessel = require(argv.vessel);
	}
}

if(argv.debug) {
	debug = !!argv.debug;
}

if(!!process.stdin.isTTY === false) {
	return require('../modes/pipe')(argv, vessel, debug);
}

if(typeof process.send === 'function') {
	return require('../modes/fork')(argv, vessel, debug); 
}

return require('../modes/standalone')(argv, vessel, debug);



